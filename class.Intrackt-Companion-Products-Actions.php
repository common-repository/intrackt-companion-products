<?php
namespace Intrackt\CompanionProducts;

/*
 * load the source for any required classes or files
 */
require_once( INTRACKT_COMPANIONPRODUCTS_PLUGIN_DIR . 'class.Intrackt-Companion-Products-PageLog.php' );
//require_once(\ABSPATH.'/wp-includes/pluggable.php');

/*
 * The Actions class will display any log messages generated by the CompanionProducts
 */
class Actions {

    /*
     * Have we instantiated the class-- this is a singleton and does not produce children
     */
    private static $initiated = false;
    
    /*
     * Init class
     */
    public static function init() {
        if ( ! self::$initiated ) {
        self::$initiated = true;
        }

    }
        
    /* =========================================================================
     * get options
     */
    private static function getOptions() {
        
        global $intracktCPOptions;
        
        /*
         * if we haven't gotten them already, then do so.
         * Let other plugins adjust the results
         */
        if (!is_array($intracktCPOptions)) {
            $intracktCPOptions = apply_filters('intrackt_companionproducts_getoptions',\get_option('intrackt_companionproducts'));        
        }
        
        return $intracktCPOptions;
    }
        
    /* =========================================================================
     * Form to update custom fields for a product
     */
    public static function actionSavePostProduct($postId,$post,$update) {

        if (array_key_exists('companionproduct_name',$_POST)) {
            update_post_meta($postId,'companionproduct_name',sanitize_text_field(wp_unslash($_POST['companionproduct_name'])));
        }

    }
        
    /*
     * add product data tab
     */
    public static function enableAdminProductTab($tabs){
        
        global $wpdb,$post;

        /*
         * get companion product category
         */
        $options=self::getOptions();
        $companionCategory=$options['companioncategory'];
        
        /*
         * do nothing if not editing an existing post
         */
        if ($post->post_status=='auto-draft') return $tabs;

        /*
         * Do nothing if this is a companion product
         */
        $companionProduct=$wpdb->get_col($wpdb->prepare("
            SELECT t.term_id
            FROM {$wpdb->prefix}term_taxonomy as tt,
                {$wpdb->prefix}terms as t,
                {$wpdb->prefix}term_relationships as tr
            WHERE tt.taxonomy='product_cat'
                AND t.term_id=tt.term_id
                AND t.slug=%s
                AND tr.term_taxonomy_id=tt.term_taxonomy_id
                AND tr.object_id={$post->ID}
            ",$companionCategory));
        if (count($companionProduct)!=0) return $tabs;
                    
        /*
         * add my tab
         */
        $tabs['intrackt_cp']=apply_filters('intrackt_companionproducts_editproducttab',
            array(
                'label'=>'Companion Product',
                'target'=>'intrackt_cp_panel'
	));        

        /*
         * return tabs
         */
	return $tabs;

    }
	
    /* =========================================================================
     * Form to update custom fields for a product
     */
    public static function adminPostEdit() {
        
        global $wpdb,$post;
        
        /*
         * get companion product category
         */
        $options=self::getOptions();
        $companionCategory=$options['companioncategory'];
        
        //PageLog::updateTestLog("adminPostEdit-----");
        
        /*
         * do nothing if not editing an existing post
         */
        if ($post->post_status=='auto-draft') return;

        /*
         * exit if not a product or is a bundle
         * But, let other plugins filter the results
         */
        if (apply_filters('intrackt_companionproducts_isvalidposttype',$post->post_type!='product')) return;
        if (apply_filters('intrackt_companionproducts_prohibitbundles',true)) {
            $bundleField=get_post_meta($post->ID,'_yith_wcpb_bundle_data',true);
            if (is_array($bundleField)) return;
        }
        
        /*
         * display top of table for custom field
         */
        echo "
            <div id='intrackt_cp_panel' class='panel woocommerce_options_panel'>
            <table class='form-table' role='presentation'>
            <tbody>
            ";
        
        /*
         * display the companion product selection widget
         * add as loop for more readable conditions control
         */
        while (true) {
            
            /*
             * get the category slugs and names for this product
             */
            $categories=apply_filters('intrackt_companionproducts_matchingcategories',$wpdb->get_col($wpdb->prepare("
                SELECT t.slug
                FROM {$wpdb->prefix}term_taxonomy as tt,
                    {$wpdb->prefix}terms as t,
                    {$wpdb->prefix}term_relationships as tr
                WHERE tt.taxonomy='product_cat'
                    AND t.term_id=tt.term_id
                    AND tr.term_taxonomy_id=tt.term_taxonomy_id
                    AND tr.object_id=%d
                ",$post->ID)));
                    
            /*
             * if no category, then display message with no selection
             */
            if (count($categories)==0) {
                echo "<tr><th colspan=2 scope='row' style='text-align: left;'>This product is not assigned to any categories and thus there are no companion products to select.</th><tr>";
                break;
            }
            
            /*
             * Get the companion products for the category
             */
            $catFill=implode(",",array_fill(0,count($categories),'%s'));
            //PageLog::updateTestLog("new prepared IN: {$catFill}");
            $categories[]=$companionCategory;
            //PageLog::updateTestObjectLog("new prepared \$categories",$categories);
            $companionProducts=apply_filters('intrackt_companionproducts_companionproducts',$wpdb->get_results($wpdb->prepare("
                SELECT p.post_title,pm.meta_value as sku
                FROM {$wpdb->prefix}term_taxonomy as tt,
                    {$wpdb->prefix}terms as t,
                    {$wpdb->prefix}term_relationships as tr,
                    {$wpdb->prefix}posts as p,
                    {$wpdb->prefix}postmeta as pm
                WHERE tt.taxonomy='product_cat'
                    AND t.term_id=tt.term_id
                    AND t.slug IN ({$catFill})
                    AND tr.term_taxonomy_id=tt.term_taxonomy_id
                    AND p.ID=tr.object_id
                    AND p.post_status='publish'
                    AND pm.post_id=p.ID AND pm.meta_key='_sku'
                    AND p.ID IN (
                        SELECT tr.object_id
                        FROM {$wpdb->prefix}term_taxonomy as tt,
                            {$wpdb->prefix}terms as t,
                            {$wpdb->prefix}term_relationships as tr
                        WHERE tt.taxonomy='product_cat'
                            AND t.term_id=tt.term_id
                            AND t.slug=%s
                            AND tr.term_taxonomy_id=tt.term_taxonomy_id
                )
                ORDER BY p.post_title
                ",$categories),OBJECT));
                
            //PageLog::updateTestLog("new prepared query: {$wpdb->last_query}");
            /*
             * If no companion products are found, say so
             */
            if (count($companionProducts)==0) {
                echo "<tr><th colspan=2 scope='row' style='text-align: left;'>There are no companion products assigned to any category assigned to this product.</th><tr>";
                break;
            }
            
            /*
             * get current value
             */
            $currentCompanionSku=get_post_meta($post->ID,'companionproduct_name',true);
            
            /*
             * determine currect selected
             */
            $currentSelectedSku='';
            foreach ($companionProducts as $companionProduct)
                if ($currentCompanionSku==$companionProduct->sku) $currentSelectedSku=$companionProduct->sku;
             
            /*
             * display top of table for the companion product select widget
             */
            echo "
                <tr class='form-field'>
                <th scope='row'>Companion product to use:</th>
                <td><select id='companionproduct_name_select' name='companionproduct_name' class='regular-select'']</td>
                    <option value='' ".(($currentSelectedSku=='')?'selected':'').">No companion product</option>
                ";
            
            /*
             * add all the companion product names
             */
            foreach ($companionProducts as $companionProduct) {
                echo "<option value='{$companionProduct->sku}' ".(($currentSelectedSku==$companionProduct->sku)?'selected':'').">{$companionProduct->post_title}</option>";
            }

            /*
             * display remainder of select and row
             */
            echo "
                </select></td>
                </tr>
                 ";
            
            /*
             * do once
             */
            break;

        }

        /*
         * display remainder of table
         */
        echo "
            </tbody>
            </table>
            </div>
            ";

        /*
         * add logic to control select widget and actual meta field widget
         */
        ?>
        <script>
            
            /*
             * on enbellish select change, copy to meta field
             */
            function copyCompanionProductsSelectToMeta(e) {
                
                /*
                 * get me
                 */
                me=e.currentTarget;
                
                /*
                 * copy my value to meta
                 */
                document.getElementById('companionproduct_name').value=me.value;
                
            }
            
            /*
             * set up product page listeners for companion product
             */
            function setupCompanionProductEditPage() {
                
                /*
                 * get select widget
                 */
                companionProductSelectObject=document.getElementById('companionproduct_name_select');
               
                /*
                 * add listener to copy select changes to meta field
                 */
                companionProductSelectObject.addEventListener('change',copyCompanionProductsSelectToMeta);
                 
                /*
                 * on startup, test current value of meta field and assign to selects
                 */
                companionProductSelectObject.value=document.getElementById('companionproduct_name').value;
                
            }
            
             /*
             * act once page is loaded
             */
            document.addEventListener("DOMContentLoaded",setupCompanionProductEditPage);
            
        </script>
        <?php
        
    }
                
    /*
     * remove companion product value when product is copied
     */
    public static function productDuplicated($newProduct,$oldProduct) {
        
        /*
         * get options and don't do this if not wanted
         */
        $options=self::getOptions();
        if ($options['keepcompanion']!=0) return;

        /*
         * Get the record ID of the new
         */
        $post_id=$newProduct->get_id();
        
        update_post_meta($post_id,'companionproduct_name','');
        
        //$metas=get_post_meta($post_id);
        
        //PageLog::updateTestObjectLog("duplicated product metas: ", $metas);
        
        
	}

    /*
     * remove companion product value when product is copied
     */
    public static function productDuplicateSkus($default,$productId,$sku) {
        
        /*
         * get options and use default if no change requested
         */
        $options=self::getOptions();
        if ($options['duplicateskus']==1) {
            $default=false;
        }
        return $default;
        
	}

    /* =========================================================================
     * add processing at top of all pages after plugins loaded-- before anything else
     */
    public static function preventReload() {
        
        /*
         * skip if not the shop page
         */
        if ((!array_key_exists('REQUEST_URI',$_SERVER))||(substr($_SERVER['REQUEST_URI'],0,6)!='/shop/')) return;
        
        /*
         * skip if not a multi cart add to cart event
         */
        if ((!is_array($_POST))||(!array_key_exists('multi_add_to_cart',$_POST))) return;
        
        /*
         * change back arrow destination
         */
        ?>
        <script>
            history.pushState([],'intracktAvoidReload','<?= $_SERVER['REQUEST_URI'] ?>');
        </script>
        <?php
        
    }
        
    /* 
     * Add companion product column heading to admin posts page
     */
    public static function customAdminPostColumnHead($columns) {
        
        $columns['companion_product']=apply_filters('intrackt_companionproducts_productlistheading','Companion Product');
        
        return $columns;
        
    }
        
    /* 
     * Add companion product column data to admin posts page
     */
    public static function customAdminPostColumnData($column,$postId) {
        
        if ($column=='companion_product') {
            echo get_post_meta($postId,'companionproduct_name',true);
        }
        
    }
        
    /* =========================================================================
     * Add hidden companion product fields to product or bundle order page
     */
    public static function addHiddenCompanionProductFields() {
        
        global $wpdb,$product;
        
        //PageLog::updateTestLog("After add to cart button");
        
        $postId=$product->get_id();
        
        /*
         * get bundle data and branch to appropriate function based on whether this is a bundle or not
         */
        $bundleData=get_post_meta($postId,'_yith_wcpb_bundle_data',true);
        if (is_array($bundleData))
            self::addHiddenCPFieldsBundle($postId,$bundleData);
        else
            self::addHiddenCPFieldsProduct($postId);
        
    }
        
    /* =========================================================================
     * Add hidden companion product fields to bundle order page
     */
    private static function addHiddenCPFieldsBundle($postId,$bundleData) {
        
        global $wpdb,$product,$companionProductIndex;
        
        //PageLog::updateTestObjectLog('$bundleData', $bundleData);
        
        /*
         * track all companion products with a unique index
         */
        if ($companionProductIndex===null) $companionProductIndex=0;
        
        /*
         * set single time for this so everything stays together
         */
        $singleTime=time();
            
        /*
         * set up sort for the bundle itself
         */
        {
            /*
             * get timestamp
             */
            $timestamp="{$singleTime}.{$companionProductIndex}";

            /*
             * output sort details
             */
            echo "
                <input type='hidden' name='companionproduct_unixtime[{$companionProductIndex}]' value='{$timestamp}'>
                <input type='hidden' name='companionproduct_in_bundle[{$companionProductIndex}]' value='no'>
                <input type='hidden' name='companionproduct_used[{$companionProductIndex}][{$postId}]' value='{$timestamp}'>
                ";
                
            do_action('intrackt_companionproducts_bundlemain',$companionProductIndex,$timestamp);
            
            $companionProductIndex++;
        }
                
        
         /*
         * array of unique companion product skus
         */
        $companionProductSkus=array();
        
        /*
         * add logic for each unique companion product in the bundle's products
         */
        foreach ($bundleData as $bundleItem) {
            
            /*
             * get item product ID
             */
            $itemPostId=$bundleItem['product_id'];
            
            /*
             * Get SKU name of companion product for this product
             */
            $companionProductSku=get_post_meta($itemPostId,'companionproduct_name',true);

            /*
             * Set key to either the companion product or 0 if missing and assign product to it
             */
            if ($companionProductSku!='') {
                $companionProductSkus[$companionProductSku][]=$itemPostId;
            } else {
                $companionProductSkus[0][]=$itemPostId;
            }
                
        }
        
       /*
         * for each unique companion product, add hidden fields
         */
        foreach ($companionProductSkus as $skuId=>$products) {
            
            /*
             * get timestamp
             */
            $timestamp="{$singleTime}.{$companionProductIndex}";

            /*
             * if no companion product, set only the sort
             */
            if ($skuId==0) {
                
                $companionProductId=0;
                
                 echo "
                    <input type='hidden' name='companionproduct_unixtime[{$companionProductIndex}]' value='{$timestamp}'>
                    <input type='hidden' name='companionproduct_in_bundle[{$companionProductIndex}]' value='no'>
                    ";

            /*
             * else use actual companion product
             */
            } else {
            
                /*
                 * Get sku's product ID
                 */
                $companionProductId=$wpdb->get_var($wpdb->prepare("
                    SELECT p.ID
                    FROM {$wpdb->prefix}postmeta as pm,
                        {$wpdb->prefix}posts as p
                    WHERE pm.meta_key='_sku'
                        AND pm.meta_value=%s
                        AND p.ID=pm.post_id
                        AND p.post_status='publish'
                    ",$skuId));

                /*
                 * add companion product to cart
                 */
                echo "
                    <input type='hidden' name='companionproduct_sku_id[{$companionProductIndex}]' value='{$skuId}'>
                    <input type='hidden' name='companionproduct_product_id[{$companionProductIndex}]' value='{$companionProductId}'>
                    <input type='hidden' name='companionproduct_unixtime[{$companionProductIndex}]' value='{$timestamp}'>
                    <input type='hidden' name='companionproduct_in_bundle[{$companionProductIndex}]' value='yes'>
                    ";
            }
                
            do_action('intrackt_companionproducts_bundlevariation',$skuId,$companionProductId,$companionProductIndex,$timestamp);
                        
            /*
             * add which products use the companion product
             */
            foreach ($products as $thisProduct) {
                echo "
                    <input type='hidden' name='companionproduct_used[{$companionProductIndex}][{$thisProduct}]' value='{$timestamp}'>
                    ";
            }

            $companionProductIndex++;
        }
        
    }
        
    /* =========================================================================
     * Add hidden companion product fields to product order page
     */
    private static function addHiddenCPFieldsProduct($postId) {
        
        global $wpdb,$product,$companionProductIndex;
        
         /*
         * Get SKU ID of companion product for this product
         */
        $companionProductSku=get_post_meta($postId,'companionproduct_name',true);
        
        /*
         * track all companion products with a unique index
         */
        if ($companionProductIndex===null) $companionProductIndex=0;
        
        /*
         * set single time for this so everything stays together
         */
        $singleTime=time();
            
        /*
         * if no companion product, just set sort
         */
        if ($companionProductSku=='') {
            
            /*
             * get timestamp
             */
            $timestamp="{$singleTime}.{$companionProductIndex}";
            
            $companionProductId=0;

            /*
             * set up for sort
             */
            echo "
                <input type='hidden' name='companionproduct_unixtime[{$companionProductIndex}]' value='{$timestamp}'>
                <input type='hidden' name='companionproduct_in_bundle[{$companionProductIndex}]' value='no'>
                <input type='hidden' name='companionproduct_used[{$companionProductIndex}][{$postId}]' value='{$timestamp}'>
                ";
                
            do_action('intrackt_companionproducts_single',$companionProductSku,$companionProductId,$companionProductIndex,$timestamp);
                        
            $companionProductIndex++;
            return;
        }
        
        /*
         * if product id of companion product sku
         */
        $companionProductId=$wpdb->get_var($wpdb->prepare("
            SELECT p.ID
            FROM {$wpdb->prefix}postmeta as pm,
                {$wpdb->prefix}posts as p
            WHERE pm.meta_key='_sku'
                AND pm.meta_value=%s
                AND p.ID=pm.post_id
                AND p.post_status='publish'
            ",$companionProductSku));
        
        /*
         * get timestamp
         */
        $timestamp=time().".".$companionProductIndex;

        /*
         * add companion product to cart
         */
        echo "
            <input type='hidden' name='companionproduct_sku_id[{$companionProductIndex}]' value='{$companionProductSku}'>
            <input type='hidden' name='companionproduct_product_id[{$companionProductIndex}]' value='{$companionProductId}'>
            <input type='hidden' name='companionproduct_unixtime[{$companionProductIndex}]' value='{$timestamp}'>
            <input type='hidden' name='companionproduct_in_bundle[{$companionProductIndex}]' value='no'>
            <input type='hidden' name='companionproduct_used[{$companionProductIndex}][{$postId}]' value='{$timestamp}'>
            ";
            
            do_action('intrackt_companionproducts_single',$companionProductSku,$companionProductId,$companionProductIndex,$timestamp);
                        
        $companionProductIndex++;
        
    }
        
    /* =========================================================================
     * update cart totals
     */
    private static function sortUpdateCartCompanionProductTotals() {
        
        self::cartLoadedFromSession();
        self::updateCartCompanionProductTotals(true);
        
    }
        
    /* =========================================================================
     * update cart totals
     */
    private static function updateCartCompanionProductTotals($deleteMissing) {
        
        //PageLog::updateTestLog('sortUpdateCartCompanionProductTotals start-------------------------------');
        //PageLog::updateTestObjectLog('sortUpdateCartCompanionProductTotals start: WC()->cart->cart_contents',WC()->cart->cart_contents);
        //PageLog::updateTestLog('sortUpdateCartCompanionProductTotals start total='.WC()->cart->get_cart_total());
        //return;
        
        /*
         * Get the totals for all companion product keys
         */
        $cpKeyTotals=array();
        foreach (WC()->cart->get_cart_contents() as $key=>$item) {

            //PageLog::updateTestLog("Got to A");
            /*
             * skip row if companion product
             */
            if (array_key_exists('companionproduct',$item)) continue;
            
            //PageLog::updateTestLog("Got to B");
            /*
             * if has a companion product key, add qty to correct key
             */
            if (array_key_exists('companionproductkey',$item)) {
                $cpKey=$item['companionproductkey'];
                //PageLog::updateTestLog("Got to C \$key='{$key}', \$cpKey='{$cpKey}'");
                if (!array_key_exists($cpKey,$cpKeyTotals))
                    $cpKeyTotals[$cpKey]=0;
                $cpKeyTotals[$cpKey]+=apply_filters('intrackt_companionproducts_changedquantity',$item['quantity']*1,$cpKeyTotals[$cpKey],$item);
            }
            
        }
        
        //PageLog::updateTestObjectLog('$cpKeyTotals', $cpKeyTotals);
        
        /*
         * run through cart items and set qty if a companion product
         */
        foreach (WC()->cart->get_cart_contents() as $key=>$item) {

            //PageLog::updateTestLog("A \$key='{$key}'");
            /*
             * skip row if not a companion product
             */
            if (!array_key_exists('companionproduct',$item)) continue;
            
            //PageLog::updateTestLog("B \$key='{$key}'");
            /*
             * if has a companion product qty, use it, else remove item
             */
            if (array_key_exists($key,$cpKeyTotals)) {
                //PageLog::updateTestLog("sortUpdateCartCompanionProductTotals new total = {$cpKeyTotals[$key]}");
                $oldQty=$item['quantity']*1;
                if ($oldQty!=$cpKeyTotals[$key]) {
                    WC()->cart->set_quantity($key,$cpKeyTotals[$key]);
                }
            } elseif ($deleteMissing) {
                //PageLog::updateTestLog("sortUpdateCartCompanionProductTotals remove item '{$key}' -------------------------------------");
                //PageLog::updateTestObjectLog('WC()->cart->get_cart_contents()',WC()->cart->get_cart_contents());
                WC()->cart->remove_cart_item($key);
            }
            
        }
        
        //PageLog::updateTestObjectLog('sortUpdateCartCompanionProductTotals end: WC()->cart->cart_contents',WC()->cart->cart_contents);
        //PageLog::updateTestLog('sortUpdateCartCompanionProductTotals end total='.WC()->cart->get_cart_total());

    }
        
    /* =========================================================================
     * Add hidden companion product to cart
     */
    public static function addHiddenCompanionProductToCartB($cartItemKey,$productId,$qty,$variationId,$variation,$cartData) {
        
        global $woocommerce,$companionProductInsideATC;
        
        /*
         * make sure I'm not recursively hitting this function!
         */
        if (isset($GLOBALS['companionProductInsideATC'])&&($companionProductInsideATC==1)) return;
        
        /*
         * Add companion product to cart and avoid recursion
         */
        $companionProductInsideATC=1;
        self::addHiddenCompanionProductToCartA();
        $companionProductInsideATC=0;
        
        //PageLog::updateTestObjectLog('End: $woocommerce->cart->cart_contents',$woocommerce->cart->cart_contents);
        
    }
        
    /* =========================================================================
     * Add hidden companion product to cart
     */
    public static function addHiddenCompanionProductToCartA() {
        
        global $woocommerce,$companionProductKeys,$companionProductSort,$companionProductTotals;
        
        /*
         * See if empty cart action has been selected and empty cart if it is
         */
        if (!empty($_POST['empty_cart'])) {
            WC()->cart->empty_cart();
            return;
        }
        
        //PageLog::updateTestLog('here A');
        /*
         * if not from bulk order page (or no companion products) go to update cart totals
         */
        if ((!array_key_exists('companionproduct_product_id',$_POST))||(!is_array($_POST['companionproduct_product_id']))
            ||(!array_key_exists('companionproduct_unixtime',$_POST))||(!is_array($_POST['companionproduct_unixtime']))
            ||(!array_key_exists('companionproduct_sku_id',$_POST))||(!is_array($_POST['companionproduct_sku_id']))
            ||(!array_key_exists('companionproduct_in_bundle',$_POST))||(!is_array($_POST['companionproduct_in_bundle']))
            ) {
            //PageLog::updateTestLog('addHiddenCompanionProductToCartA->sortUpdateCartCompanionProductTotals ');
            return self::sortUpdateCartCompanionProductTotals();
        }
        
        //PageLog::updateTestLog('here A');
        /*
         * Do for each unique companion product
         */
        for ($i=0;$i<count($_POST['companionproduct_unixtime']);$i++) {
            
            //PageLog::updateTestLog('here B');
            /*
             * get the timestamp
             */
            $timestamp=sanitize_text_field(wp_unslash($_POST['companionproduct_unixtime'][$i]));
            
            /*
             * if not related to a companion product, then just set sort
             */
            if (!array_key_exists($i,$_POST['companionproduct_sku_id'])) {
                //$companionProductKeys[$i]=$woocommerce->cart->add_to_cart($companionProductId,max(1,$companionProductTotal),0,array(),array(
                //    'CartSort'=>"{$timestamp}-999",
                //    ));
                continue;
            }
            
            //PageLog::updateTestLog('here C');
            
            /*
             * get other companion product fields
             */
            $companionProductId=sanitize_text_field(wp_unslash($_POST['companionproduct_product_id'][$i]));
            $skuId=sanitize_text_field(wp_unslash($_POST['companionproduct_sku_id'][$i]));
            //if (array_key_exists('companionproduct_in_bundle',$_POST)&&is_array($_POST['companionproduct_in_bundle'])
            //    &&array_key_exists($i,$_POST['companionproduct_in_bundle'])&($_POST['companionproduct_in_bundle'][$i]=='yes'))
            //    $inBundle=true;
            //else
            //    $inBundle=false;
            $inBundle=($_POST['companionproduct_in_bundle'][$i]=='yes');

            /*
             * if no total counter yet, init it
             */
            if ((!is_array($companionProductTotals))||(!array_key_exists($i,$companionProductTotals))) $companionProductTotals[$i]=0;
            $companionProductTotal=$companionProductTotals[$i];

            /*
             * add hidden companion product based on in or out of bundle
             */
            if ($inBundle) {
                //PageLog::updateTestLog('here D');
                $companionProductKeys[$i]=$woocommerce->cart->add_to_cart($companionProductId,max(1,$companionProductTotal),0,array(),array(
                    'CartSort'=>"{$timestamp}-999",
                    'companionproduct'=>$skuId,
                    'bundleCompanionProduct'=>'yes',
                    'companionProductFamily'=>$timestamp
                    ));
            } else {
                //PageLog::updateTestLog('here E');
                $companionProductKeys[$i]=$woocommerce->cart->add_to_cart($companionProductId,max(1,$companionProductTotal),0,array(),array(
                    'CartSort'=>"{$timestamp}-999",
                    'companionproduct'=>$skuId,
                    'companionProductFamily'=>$timestamp
                    ));
            }
                
        }

        //PageLog::updateTestObjectLog('$woocommerce->cart->cart_contents', $woocommerce->cart->cart_contents);
                    
    }
        
    /* =========================================================================
     * process data of all items added to cart
     */
    public static function updateSkuDataInCart($cartData,$productId,$variationId,$quantity) {
        
        global $woocommerce,$companionProductKeys,$companionProductSort,$companionProductTotals;
        
        //PageLog::updateTestLog("updateSkuDataInCart start '{$productId}' ------------------------------------------");
        //PageLog::updateTestObjectLog("\$companionProductKeys",$companionProductKeys);
        //PageLog::updateTestObjectLog("\$cartData",$cartData);
        //PageLog::updateTestObjectLog("\$woocommerce->cart",$woocommerce->cart);
        
        /*
         * let other plugins filter cartData
         */
        $cartData=apply_filters('intrackt_companionproducts_updateskudataincart',$cartData,$productId,$variationId,$quantity);
        
        /*
         * if companion product, exit
         */
        if (array_key_exists('companionproduct',$cartData)) return $cartData;
        
        //PageLog::updateTestLog("updateSkuDataInCart: A");
        
        /*
         * if no companion product, exit
         */
        if (!array_key_exists('companionproduct_unixtime',$_POST)) {
            return $cartData;
        }
        
        /*
         * return if no companion product used table
         */
        if ((!array_key_exists('companionproduct_used',$_POST))||(!is_array($_POST['companionproduct_used'])))
            return $cartData;
        
        //PageLog::updateTestLog("updateSkuDataInCart: B");
        /*
         * If counter is null, init it to 1 less than needed
         */
        if ($companionProductSort===null) $companionProductSort=99;
        
        //PageLog::updateTestLog("updateSkuDataInCart: C");
        
        /*
         * get companion product used table
         */
        $companionProductsUsed=$_POST['companionproduct_used'];
        
        /*
         * do the following for each companion product on product page
         */
        for ($i=0;$i<count($_POST['companionproduct_unixtime']);$i++) {
            
            //PageLog::updateTestLog("updateSkuDataInCart: D");
            /*
             * get timestamp which is used as the companion product family
             */
            $timestamp=sanitize_text_field(wp_unslash($_POST['companionproduct_unixtime'][$i]));
            
            /*
             * skip if tis product does not have a companion product or it doesn't match this companion product
             */
            if ((!array_key_exists($productId,$companionProductsUsed[$i]))||($companionProductsUsed[$i][$productId]!=$timestamp)) continue;

            //PageLog::updateTestLog("updateSkuDataInCart: E");
            /*
             * update counter and add to cart data along with timestamp
             */
            $companionProductSort++;
            $cartData['CartSort']="{$timestamp}-{$companionProductSort}";
            
            /*
             * if not in and companion product family, skip the rest
             */
            if ((!array_key_exists('companionproduct_sku_id',$_POST))||(!array_key_exists($i,$_POST['companionproduct_sku_id']))) continue;
            
            $cartData['companionProductFamily']=$timestamp;

            //PageLog::updateTestLog("updateSkuDataInCart: F");

            /*
             * update total
             */
            if ((!is_array($companionProductTotals))||(!array_key_exists($i,$companionProductTotals))) $companionProductTotals[$i]=0;
            $companionProductTotals[$i]+=apply_filters('intrackt_companionproducts_changedquantity',$quantity,$companionProductTotals[$i],$cartData);

            /*
             * if companion product already added, update qty
             */
            if (is_array($companionProductKeys)&&(array_key_exists($i,$companionProductKeys))) {
                
                //PageLog::updateTestLog("updateSkuDataInCart filtered and adjusted '{$productId}' ------------------------------------------");
                
                if (array_key_exists($companionProductKeys[$i],$woocommerce->cart->cart_contents)) {
                    //PageLog::updateTestLog("{$i}: set_quantity({$companionProductKeys[$i]},{$companionProductTotals[$i]})");
                    $woocommerce->cart->set_quantity($companionProductKeys[$i],$companionProductTotals[$i]);
                } elseif (array_key_exists($companionProductKeys[$i],$woocommerce->cart->removed_cart_contents)) {
                    //PageLog::updateTestLog("{$i}: \$woocommerce->cart->removed_cart_contents[{$companionProductKeys[$i]}]['quantity']={$companionProductTotals[$i]}");
                    $woocommerce->cart->removed_cart_contents[$companionProductKeys[$i]]['quantity']=$companionProductTotals[$i];
                    $woocommerce->cart->restore_cart_item($companionProductKeys[$i]);
                }
                
                //PageLog::updateTestObjectLog("\$companionProductKeys",$companionProductKeys);
                //PageLog::updateTestObjectLog("\$cartData",$cartData);
                //PageLog::updateTestObjectLog("\$woocommerce->cart",$woocommerce->cart);

            }

            /*
             * increment counter
             */
            $companionProductSort++;
            
        //PageLog::updateTestObjectLog("updateSkuDataInCart End:'{$productId}': ".'$cartData',$cartData);
        }
        
        //PageLog::updateTestObjectLog('updateSkuDataInCart: $cartData', $cartData);
        
        return $cartData;
        
    }
        
    /* =========================================================================
     * cart has been loaded, so sort and assign companion product keys
     */
    public static function cartLoadedFromSession() {
            
        //PageLog::updateLog("cartLoadedFromSession");
        
        /*
         * Sort by CartSort order.  Also, get an array of companion product families and keys
         */
        {
        
            /*
             * create array of keys with value the field to be sorted
             */
            $sortArray=array();
            $missingCounter=999000; //use this as the cart sort if the CartSort field is missing
            $familyKeys=array();
            foreach (WC()->cart->get_cart_contents() as $key=>$item) {
                
                //PageLog::updateTestLog('----------------------------------');
                //PageLog::updateTestObjectLog('$item',$item);
                
                /*
                 * Use cart sort field if present, else use indexed missing counter
                 */
                $sortArray[$key]=(array_key_exists('CartSort',$item))?$item['CartSort']:$missingCounter++;
                
                /*
                 * if this item is a companion product, assign its key to the family keys array
                 */
                if (array_key_exists('companionproduct',$item))
                    $familyKeys[$item['companionProductFamily']]=$key;
                
            }
            
            //PageLog::updateTestObjectLog('$sortArray',$sortArray);
            //PageLog::updateTestObjectLog('$familyKeys',$familyKeys);
            
            /*
             * sort and reassign to cart
             * Also, add companion product key
             */
            asort($sortArray);
            $newCartContents=array();
            foreach ($sortArray as $key=>$ignore) {
                
                /*
                 * add item in correct order
                 */
                $newCartContents[$key]=WC()->cart->cart_contents[$key];
                
                /*
                 * if has a companion product family and there is a key for that family, add it to the data for the item
                 */
                if (array_key_exists('companionProductFamily',$newCartContents[$key])&&array_key_exists($newCartContents[$key]['companionProductFamily'],$familyKeys))
                    $newCartContents[$key]['companionproductkey']=$familyKeys[$newCartContents[$key]['companionProductFamily']];
            }
            
        }
        
        /*
         * replace cart contents with sorted contents
         */
        WC()->cart->cart_contents = $newCartContents;
         
        //PageLog::updateTestObjectLog('WC()->cart->get_cart_contents()',WC()->cart->get_cart_contents());
        
    }
        
    /* =========================================================================
     * remove link to remove a companion product from the cart
     */
    public static function removeCartCPRemoveLink($button,$key) {
        
        /*
         * if not a companion product, then return normally
         */
        if (!array_key_exists('companionproduct',WC()->cart->cart_contents[$key])) return $button;
        
        /*
         * return with no remove link
         */
        return apply_filters('intrackt_companionproducts_deletebutton','',$button,$key);
        
    }
        
    /* =========================================================================
     * show qty for companion product in cart, but disable changing it
     */
    public static function disableCartCPChangeQty($input,$key,$item) {
            
        //PageLog::updateTestLog("disableCartCPChangeQty: \$input: {$input}");
        
        /*
         * if not a companion product, then return normally
         */
        if (!array_key_exists('companionproduct',$item)) {
            
            /*
             * fix issue of qty not showing
             */
            $input=str_replace('id="','style="display: inline !important;" id="',$input);
            //PageLog::updateTestLog($input);
            return $input;
        }
        
        /*
         * return with display of qty only
         */
        $displayArray=apply_filters('intrackt_companionproducts_qtydisplay',array(
            '%2$s <input type="hidden" name="cart[%1$s][qty]" value="%2$s">',
            array($key,$item['quantity'])
            ),$input,$key,$item);
        return vsprintf($displayArray[0],$displayArray[1]);
        
    }
        
    /* =========================================================================
     * removed item from cart
     */
    public static function removedCartItem($key,$cart) {
        
        //PageLog::updateTestLog("removeCartItem '{$key}'");
        /*
         * item removed, so update companion product counts
         */
        //PageLog::updateTestLog('removedCartItem pre');
        //PageLog::updateTestLog('removedCartItem->sortUpdateCartCompanionProductTotals ');
        self::sortUpdateCartCompanionProductTotals();
        
    }
        
    /* =========================================================================
     * add a 'Remove All Items" button to cart
     */
    public static function removedAllItemsButton() {
        
        //PageLog::updateTestLog('removedAllItemsButton');
        /*
         * add button to remove all items from the cart
         */
        echo apply_filters('intrackt_companionproducts_removeall',"<button type='submit' id='empty_cart_button' class='button' onclick='return emptyingCart(event);' name='empty_cart' value='Remove All Items'>Remove All Items</button>");
        
    }
        
    /* =========================================================================
     * add controls at bottom of pages
     */
    public static function bottomOfFrontPage() {
        
        /*
         * do this only if this is the cart page
         */
        if (array_key_exists('REQUEST_URI',$_SERVER)&&(substr($_SERVER['REQUEST_URI'],0,6)=='/cart/')) {
            
            /*
             * add logic to alert customer if this button is clicked
             */
            ?>
            <script>

                /*
                 * function to empty cart
                 */
                function emptyingCart(e) {

                    /*
                     * ask if really wanted and return normally if true
                     */
                    if (confirm("<?= apply_filters('intrackt_companionproducts_removeallmsg',
                        "Are you sure you want to delete all the items from your cart?") ?>")) return true;

                    /*
                     * else cancel process
                     */
                    e.preventDefault();
                    return false;

                }

                /*
                 * listen for empty cart button to be clicked
                 */
                //removeButton=document.getElementById('empty_cart_button');
                //if (removeButton!=null) removeButton.addEventListener('click',emptyingCart);

            </script>
            <?php
        
        }
        
    }
        
    /* **********************************************************
     * filter companion product price
     */
    public static function actionBeforeCalculateTotals($cart) {
        
        //global $intracktCPSideCartCompute;
        
        /*
         * get options
         */
        $options=self::getOptions();

        /*
         * if not changing companion product price, then exit
         */
        if (in_array($options['companionprice'],array('zero','hide'))) { 

            /*
             * look at each item in cart
             */
            foreach($cart->get_cart() as $cartItem) {

                /*
                 * if companion product, set price to 0
                 */
                if (array_key_exists('companionproduct',$cartItem)) {
                        $cartItem['data']->set_price(apply_filters('intrackt_companionproducts_zeroprice',0,$cartItem));
                }

            }
        }
        
        /*
         * Adding this here actually 
         */
        //PageLog::updateTestLog("actionBeforeCalculateTotals--------------------------------------");
        //PageLog::updateTestObjectLog('$cart->cart_contents', $cart->cart_contents);
        //PageLog::updateTestObjectLog('$cart->cart_session_data',$cart->cart_session_data);
        //self::sortUpdateCartCompanionProductTotals();
        //self::cartLoadedFromSession();
        //$intracktCPSideCartCompute=1;

    }

    /* **********************************************************
     * blank companion product price
     */
    public static function blankCompanionProductPrice($price,$cartItem,$cartItemKey) {
        
        /*
         * get options
         */
        $options=self::getOptions();
        
        /*
         * do if option is to hide price
         */
        if ($options['companionprice']=='hide') {
            
            /*
             * if companion product display blank
             */
            if (array_key_exists('companionproduct',$cartItem)) {
                return apply_filters('intrackt_companionproducts_hideprice','',$cartItem);
            }
            
        }
        
        /*
         * else return price
         */
        return $price;
        
    }

    /* **********************************************************
     * Use cart item permalink filter to grab cart item key and data
     */
    public static function wscpFilterCartItem($permaLink,$cartItem,$cartItemKey) {
        
        global $intracktCPItemKey,$intracktCPItemData;
        
        /*
         * save key and data
         */
        $cartItemKey=$cartItemKey;
        $intracktCPItemData=$cartItem;
        
        return $permaLink;
    }
        
    /* **********************************************************
     * add hidden fields after image on side cart
     */
    public static function afterCartQtyChange($key,$newQty,$oldQty,$cart) {
        
        self::updateCartCompanionProductTotals(false);
    
    }
        
    /* **********************************************************
     * add hidden fields after image on side cart
     */
    public static function wscpActionAfterImage() {
        
        global $intracktCPItemKey,$intracktCPItemData;
        //global $intracktCPSideCartCompute;
        
        /*
         * recompute totals first time
         */
        //if (isset($GLOBALS['intracktCPSideCartCompute'])&&($intracktCPSideCartCompute==1)) {
        //    self::updateCartCompanionProductTotals(false);
        //    $intracktCPSideCartCompute=0;
        //}

        
        //PageLog::updateTestObjectLog("\$intracktCPItemKey='{$intracktCPItemKey}': \$intracktCPItemData",$intracktCPItemData);
        
        if (array_key_exists('companionproduct',$intracktCPItemData)) {
            echo "<input type='hidden' name='intrackt_companion_product' value='{$intracktCPItemData['key']}'>";
            do_action('intrackt_companionproducts_morehtmlinfo',$intracktCPItemData);
            //echo "<input type='hidden' name='intrackt_companion_product' value='{$intracktCPItemData['key']}' data-qty='{$intracktCPItemData['quantity']}' data-total='{$intracktCPItemData['line_total']}'>";
        }
                
   }
        
    /* **********************************************************
     * add javascript to bottom of front pate
     */
    public static function wscpActionFrontPageFooter() {
        
        /*
         * get options
         */
        $options=self::getOptions();
        $hidePriceOption=$options['companionprice']
        
        /*
         * know when side cart loaded
         */
        ?>
        <script>
            
            /*
             * do always to see if side cart loaded
             */
            function icpWscpLoaded() {
                
                /*
                 * have a cart icon count
                 */
                cartCountObj=document.querySelector('.xoo-wsc-items-count');
                if ((cartCountObj!==null)&&(cartCountObj!==undefined)) {
                    
                    /*
                     * modify display of companion product is side card when product added or when cart is changed
                     */
                    jQuery(document.body).on('added_to_cart',icpWscpSetup);
                    jQuery(document.body).on('xoo_wsc_cart_updated',icpWscpSetup);
                    
                    /*
                     * if there is something in the card, then modify the display of the companion product in the cart
                     * (Note, at some point in the first few seconds of the display, the side card logic restores the companion cart display
                     * so we are repairing the display every 1/10 second for 10 seconds.)
                     */
                    if (cartCountObj.innerText!='0') {
                        for (i=100;i<10000;i+=100) setTimeout(icpWscpSetup,i);
                    }
                }
            }
            
            /*
             * fix the companion product display
             */
            function icpWscpSetup() {

                /*
                 * Find and loop through all companion products in cart
                 */
                companionProducts=document.getElementsByName('intrackt_companion_product');
                if ((companionProducts!==null)&&(companionProducts!==undefined)) {
                    for (i=0;i<companionProducts.length;i++) {
                        
                        /*
                         * get qty and price
                         */
                        //qtyVal=companionProducts[i].getAttribute('data-qty');
                        //totalVal=companionProducts[i].getAttribute('data-total');
                        
                        /*
                         * get the parent div for the companion product
                         */
                        parentDiv=document.querySelector('[data-xoo_wsc="'+companionProducts[i].value+'"]');
                        if ((parentDiv!==null)&&(parentDiv!==undefined)) {
                            
                            /*
                             * remove trash icon
                             */
                            trashObj=parentDiv.querySelector('.xoo-wsc-remove');
                            if ((trashObj!==null)&&(trashObj!==undefined)) {
                                trashObj.setAttribute('class','');
                            }
                            
                            /*
                             * remove price if that is the option
                             */
                            if ('<?= $hidePriceOption ?>'=='hide') {
                                priceObj=parentDiv.querySelector('.xoo-wsc-price');
                                if ((priceObj!==null)&&(priceObj!==undefined)) {
                                    priceObj.setAttribute('class','');
                                    priceObj.style.display='none';
                                }
                            }
                            
                            /*
                             * remove minus icon
                             */
                            minusObj=parentDiv.querySelector('.xoo-wsc-minus');
                            if ((minusObj!==null)&&(minusObj!==undefined)) {
                                minusObj.setAttribute('class','');
                                minusObj.innerText='';
                            }
                            
                            /*
                             * remove plus icon
                             */
                            plusObj=parentDiv.querySelector('.xoo-wsc-plus');
                            if ((plusObj!==null)&&(plusObj!==undefined)) {
                                plusObj.setAttribute('class','');
                                plusObj.innerText='';
                            }
                            
                            /*
                             * remove qty edit
                             */
                            qtyObj=parentDiv.querySelector('.xoo-wsc-qty');
                            if ((qtyObj!==null)&&(qtyObj!==undefined)) {
                                //qtyObj.value=qtyVal;
                                qtyObj.setAttribute('class','');
                                qtyObj.setAttribute('type','text');
                                qtyObj.setAttribute('min','');
                                qtyObj.setAttribute('step','');
                                qtyObj.setAttribute('pattern','');
                                qtyObj.disabled=true;
                                qtyObj.readonly=true;
                                qtyObj.style.borderStyle='none';
                                qtyObj.style.backgroundColor='transparent';
                                qtyObj.parentNode.setAttribute('class','');
                            }
                            
                            /*
                             * change total
                             */
                            //totalObj=parentDiv.querySelector('.woocommerce-Price-currencySymbol');
                            //totalObj.nextSibling.innerText=totalVal;
                            
                        }
                    }
                }
                            
            }
            
            document.addEventListener("DOMContentLoaded",icpWscpLoaded);
            
        </script>
        <?php
        
   }
        
}
